%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(thrift_test_types).

-include("thrift_test_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('Bonk') ->
  {struct, [{1, string},
          {2, i32}]}
;

struct_info('Bools') ->
  {struct, [{1, bool},
          {2, bool}]}
;

struct_info('Xtruct') ->
  {struct, [{1, string},
          {4, byte},
          {9, i32},
          {11, i64}]}
;

struct_info('Xtruct2') ->
  {struct, [{1, byte},
          {2, {struct, {'thrift_test_types', 'Xtruct'}}},
          {3, i32}]}
;

struct_info('Xtruct3') ->
  {struct, [{1, string},
          {4, i32},
          {9, i32},
          {11, i64}]}
;

struct_info('Insanity') ->
  {struct, [{1, {map, i32, i64}},
          {2, {list, {struct, {'thrift_test_types', 'Xtruct'}}}}]}
;

struct_info('CrazyNesting') ->
  {struct, [{1, string},
          {2, {set, {struct, {'thrift_test_types', 'Insanity'}}}},
          {3, {list, {map, {set, i32}, {map, i32, {set, {list, {map, {struct, {'thrift_test_types', 'Insanity'}}, string}}}}}}},
          {4, string}]}
;

struct_info('Xception') ->
  {struct, [{1, i32},
          {2, string}]}
;

struct_info('Xception2') ->
  {struct, [{1, i32},
          {2, {struct, {'thrift_test_types', 'Xtruct'}}}]}
;

struct_info('EmptyStruct') ->
  {struct, []}
;

struct_info('OneField') ->
  {struct, [{1, {struct, {'thrift_test_types', 'EmptyStruct'}}}]}
;

struct_info('VersioningTestV1') ->
  {struct, [{1, i32},
          {3, string},
          {12, i32}]}
;

struct_info('VersioningTestV2') ->
  {struct, [{1, i32},
          {2, i32},
          {3, byte},
          {4, i16},
          {5, i64},
          {6, double},
          {7, {struct, {'thrift_test_types', 'Bonk'}}},
          {8, {list, i32}},
          {9, {set, i32}},
          {10, {map, i32, i32}},
          {11, string},
          {12, i32}]}
;

struct_info('ListTypeVersioningV1') ->
  {struct, [{1, {list, i32}},
          {2, string}]}
;

struct_info('ListTypeVersioningV2') ->
  {struct, [{1, {list, string}},
          {2, string}]}
;

struct_info('GuessProtocolStruct') ->
  {struct, [{7, {map, string, string}}]}
;

struct_info('LargeDeltas') ->
  {struct, [{1, {struct, {'thrift_test_types', 'Bools'}}},
          {10, {struct, {'thrift_test_types', 'Bools'}}},
          {100, {struct, {'thrift_test_types', 'Bools'}}},
          {500, bool},
          {1000, {struct, {'thrift_test_types', 'Bools'}}},
          {1500, bool},
          {2000, {struct, {'thrift_test_types', 'VersioningTestV2'}}},
          {2500, {set, string}},
          {3000, {struct, {'thrift_test_types', 'VersioningTestV2'}}},
          {4000, {list, i32}}]}
;

struct_info('NestedListsI32x2') ->
  {struct, [{1, {list, {list, i32}}}]}
;

struct_info('NestedListsI32x3') ->
  {struct, [{1, {list, {list, {list, i32}}}}]}
;

struct_info('NestedMixedx2') ->
  {struct, [{1, {list, {set, i32}}},
          {2, {map, i32, {set, string}}},
          {3, {list, {map, i32, {set, string}}}}]}
;

struct_info('ListBonks') ->
  {struct, [{1, {list, {struct, {'thrift_test_types', 'Bonk'}}}}]}
;

struct_info('NestedListsBonk') ->
  {struct, [{1, {list, {list, {list, {struct, {'thrift_test_types', 'Bonk'}}}}}}]}
;

struct_info('BoolTest') ->
  {struct, [{1, bool},
          {2, string}]}
;

struct_info('StructA') ->
  {struct, [{1, string}]}
;

struct_info('StructB') ->
  {struct, [{1, {struct, {'thrift_test_types', 'StructA'}}},
          {2, {struct, {'thrift_test_types', 'StructA'}}}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Bonk') ->
  {struct, [{1, undefined, string, 'message', undefined},
          {2, undefined, i32, 'type', undefined}]}
;

struct_info_ext('Bools') ->
  {struct, [{1, undefined, bool, 'im_true', undefined},
          {2, undefined, bool, 'im_false', undefined}]}
;

struct_info_ext('Xtruct') ->
  {struct, [{1, undefined, string, 'string_thing', undefined},
          {4, undefined, byte, 'byte_thing', undefined},
          {9, undefined, i32, 'i32_thing', undefined},
          {11, undefined, i64, 'i64_thing', undefined}]}
;

struct_info_ext('Xtruct2') ->
  {struct, [{1, undefined, byte, 'byte_thing', undefined},
          {2, undefined, {struct, {'thrift_test_types', 'Xtruct'}}, 'struct_thing', #'Xtruct'{}},
          {3, undefined, i32, 'i32_thing', undefined}]}
;

struct_info_ext('Xtruct3') ->
  {struct, [{1, undefined, string, 'string_thing', undefined},
          {4, undefined, i32, 'changed', undefined},
          {9, undefined, i32, 'i32_thing', undefined},
          {11, undefined, i64, 'i64_thing', undefined}]}
;

struct_info_ext('Insanity') ->
  {struct, [{1, undefined, {map, i32, i64}, 'userMap', dict:new()},
          {2, undefined, {list, {struct, {'thrift_test_types', 'Xtruct'}}}, 'xtructs', []}]}
;

struct_info_ext('CrazyNesting') ->
  {struct, [{1, undefined, string, 'string_field', undefined},
          {2, optional, {set, {struct, {'thrift_test_types', 'Insanity'}}}, 'set_field', sets:new()},
          {3, required, {list, {map, {set, i32}, {map, i32, {set, {list, {map, {struct, {'thrift_test_types', 'Insanity'}}, string}}}}}}, 'list_field', []},
          {4, undefined, string, 'binary_field', undefined}]}
;

struct_info_ext('Xception') ->
  {struct, [{1, undefined, i32, 'errorCode', undefined},
          {2, undefined, string, 'message', undefined}]}
;

struct_info_ext('Xception2') ->
  {struct, [{1, undefined, i32, 'errorCode', undefined},
          {2, undefined, {struct, {'thrift_test_types', 'Xtruct'}}, 'struct_thing', #'Xtruct'{}}]}
;

struct_info_ext('EmptyStruct') ->
  {struct, []}
;

struct_info_ext('OneField') ->
  {struct, [{1, undefined, {struct, {'thrift_test_types', 'EmptyStruct'}}, 'field', #'EmptyStruct'{}}]}
;

struct_info_ext('VersioningTestV1') ->
  {struct, [{1, undefined, i32, 'begin_in_both', undefined},
          {3, undefined, string, 'old_string', undefined},
          {12, undefined, i32, 'end_in_both', undefined}]}
;

struct_info_ext('VersioningTestV2') ->
  {struct, [{1, undefined, i32, 'begin_in_both', undefined},
          {2, undefined, i32, 'newint', undefined},
          {3, undefined, byte, 'newbyte', undefined},
          {4, undefined, i16, 'newshort', undefined},
          {5, undefined, i64, 'newlong', undefined},
          {6, undefined, double, 'newdouble', undefined},
          {7, undefined, {struct, {'thrift_test_types', 'Bonk'}}, 'newstruct', #'Bonk'{}},
          {8, undefined, {list, i32}, 'newlist', []},
          {9, undefined, {set, i32}, 'newset', sets:new()},
          {10, undefined, {map, i32, i32}, 'newmap', dict:new()},
          {11, undefined, string, 'newstring', undefined},
          {12, undefined, i32, 'end_in_both', undefined}]}
;

struct_info_ext('ListTypeVersioningV1') ->
  {struct, [{1, undefined, {list, i32}, 'myints', []},
          {2, undefined, string, 'hello', undefined}]}
;

struct_info_ext('ListTypeVersioningV2') ->
  {struct, [{1, undefined, {list, string}, 'strings', []},
          {2, undefined, string, 'hello', undefined}]}
;

struct_info_ext('GuessProtocolStruct') ->
  {struct, [{7, undefined, {map, string, string}, 'map_field', dict:new()}]}
;

struct_info_ext('LargeDeltas') ->
  {struct, [{1, undefined, {struct, {'thrift_test_types', 'Bools'}}, 'b1', #'Bools'{}},
          {10, undefined, {struct, {'thrift_test_types', 'Bools'}}, 'b10', #'Bools'{}},
          {100, undefined, {struct, {'thrift_test_types', 'Bools'}}, 'b100', #'Bools'{}},
          {500, undefined, bool, 'check_true', undefined},
          {1000, undefined, {struct, {'thrift_test_types', 'Bools'}}, 'b1000', #'Bools'{}},
          {1500, undefined, bool, 'check_false', undefined},
          {2000, undefined, {struct, {'thrift_test_types', 'VersioningTestV2'}}, 'vertwo2000', #'VersioningTestV2'{}},
          {2500, undefined, {set, string}, 'a_set2500', sets:new()},
          {3000, undefined, {struct, {'thrift_test_types', 'VersioningTestV2'}}, 'vertwo3000', #'VersioningTestV2'{}},
          {4000, undefined, {list, i32}, 'big_numbers', []}]}
;

struct_info_ext('NestedListsI32x2') ->
  {struct, [{1, undefined, {list, {list, i32}}, 'integerlist', []}]}
;

struct_info_ext('NestedListsI32x3') ->
  {struct, [{1, undefined, {list, {list, {list, i32}}}, 'integerlist', []}]}
;

struct_info_ext('NestedMixedx2') ->
  {struct, [{1, undefined, {list, {set, i32}}, 'int_set_list', []},
          {2, undefined, {map, i32, {set, string}}, 'map_int_strset', dict:new()},
          {3, undefined, {list, {map, i32, {set, string}}}, 'map_int_strset_list', []}]}
;

struct_info_ext('ListBonks') ->
  {struct, [{1, undefined, {list, {struct, {'thrift_test_types', 'Bonk'}}}, 'bonk', []}]}
;

struct_info_ext('NestedListsBonk') ->
  {struct, [{1, undefined, {list, {list, {list, {struct, {'thrift_test_types', 'Bonk'}}}}}, 'bonk', []}]}
;

struct_info_ext('BoolTest') ->
  {struct, [{1, optional, bool, 'b', true},
          {2, optional, string, 's', "true"}]}
;

struct_info_ext('StructA') ->
  {struct, [{1, required, string, 's', undefined}]}
;

struct_info_ext('StructB') ->
  {struct, [{1, optional, {struct, {'thrift_test_types', 'StructA'}}, 'aa', #'StructA'{}},
          {2, required, {struct, {'thrift_test_types', 'StructA'}}, 'ab', #'StructA'{}}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

